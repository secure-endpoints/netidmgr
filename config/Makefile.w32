#
#  Khimaira : Win32 configuration makefile
#             This file will be included by all the makefiles
#             in the build tree.
#
# Copyright (c) 2004,2005,2006 Massachusetts Institute of Technology
# Copyright (c) 2006-2011 Secure Endpoints Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

!ifndef KHIMAIRA_WIN32_CONFIG
KHIMAIRA_WIN32_CONFIG=1

# Environment Variables
#  The following environment variables MUST be set:
#   KH_ROOT : Root of the source tree.
#   KH_BUILD: One of DEBUG or RETAIL
#   KH_CLVER: One of 'vc7', 'vc8', 'vc9' or 'vc10'.  The C compiler used for the build
#   KERBEROSCOMPATSDKROOT: Path to Kerberos Compatibility SDK
#   HEIMDALSDKROOT: Path to Heimdal SDK
#
#  The following environment variables are optional:
#   KH_RUNTIME: One of STATIC or DLL, specifies whether the CRT libs
#               are linked statically or through MSVCRT.DLL.
#   KH_AUXCFLAGS: Optional flags for CL
#   KH_RELEASE: Release type.  One of OFFICIAL, PRERELEASE, PRIVATE or SPECIAL.
#      OFFICIAL   : An official release of Khimaira
#      PREPRELEASE: A beta/release candidate release
#      PRIVATE    : Private build
#      SPECIAL    : Special build.  Typically one with non-mainline patches.
#   KH_PROFILE: Profiling.  Can be one of PGI or PGO
#      PGI        : Instrument for profiling
#      PGO        : Optimized build using profile data

!include "Makefile.version"

# Actual build environment settings

# Check for required env vars
!ifndef MODULE
!	error MODULE must be specified
!endif
!ifndef KH_ROOT
!	error KH_ROOT must be defined
!endif

# See what compiler we are using
!ifndef KH_CLVER
!  error KH_CLVER needs to be set to the version of the C/C++ compiler that is being used (vc7, vc8, vc9, or vc10)
!endif
!if "$(KH_CLVER)" != "vc7" && "$(KH_CLVER)" != "vc8" && "$(KH_CLVER)" != "vc9" && "$(KH_CLVER)" != "vc10"
!  error Unknown compiler specified in KH_CLVER
!endif

# Profiling
!if defined(KH_PROFILE) && "$(KH_PROFILE)" != "PGI" && "$(KH_PROFILE)" != "PGO"
!  error Invalid profiling mode specified in KH_PROFILE
!endif

!ifdef NODEBUG
OUTPRE_DBG=rel
!else
OUTPRE_DBG=dbg
!endif
OUTPRE1=obj
OUTPRE2=$(OUTPRE1)\$(CPU)
OUTPRE3=$(OUTPRE2)\$(OUTPRE_DBG)
OUTPRE=$(OUTPRE3)

# Output directory structure
DESTROOT=$(KH_ROOT)\dest
OBJROOT=$(KH_ROOT)\obj
SRC=$(KH_ROOT)

DESTDIR=$(DESTROOT)\$(CPU)\$(OUTPRE_DBG)
OBJDIR=$(OBJROOT)\$(CPU)\$(OUTPRE_DBG)

OBJ=$(OBJDIR)\$(MODULE)
INCDIR=$(DESTDIR)\inc
BINDIR=$(DESTDIR)\bin
#BINDIR=$(KH_ROOT)\$(OUTPRE)
LIBDIR=$(DESTDIR)\lib
#LIBDIR=$(KH_ROOT)\$(OUTPRE)
DOCDIR=$(DESTDIR)\doc

# Source directories
CONFDIR=$(SRC)\config


# If we are forcing a Win2K build, we need to adjust the build
# directories and environment.

!ifdef KHBUILD_W2K

OBJ=$(OBJ)\W2K
BINDIR=$(BINDIR)\W2K
LIBDIR=$(LIBDIR)\W2K

APPVER=5.0
TARGETOS=WINNT
_WIN32_IE=0x0500
_WIN32_WINNT=0x0500
!endif

# Setup environment for win32.mak

!if "$(KH_BUILD)" == "RETAIL"
NODEBUG=1
!endif


# Win32.mak

!include <Win32.Mak>

# Program macros

CD=cd
RM=del /q
MKDIR=md
RMDIR=rd
ECHO=echo
MAKECMD=nmake /nologo
CP=copy /y
LINK=link
CCSV=perl $(SRC)\config\ccsv.pl
MC=mc

!ifdef KH_DOXYFULLPATH
DOXYGEN=$(KH_DOXYFULLPATH)
!else
DOXYGEN=doxygen
!endif

!ifdef KH_HHCFULLPATH
HHC=$(KH_HHCFULLPATH)
!else
HHC=hhc
!endif

!if defined(HEIMDALSDKROOT)
HEIMDALINCDIR=$(HEIMDALSDKROOT)\inc
krbincflags =-I$(HEIMDALINCDIR) -I$(HEIMDALINCDIR)\krb5
HEIMDALLIBDIR=$(HEIMDALSDKROOT)\lib\$(CPU)
BUILD_HEIMDAL=1
!elseif defined(KERBEROSCOMPATSDKROOT)
krbincflags =-I$(KERBEROSCOMPATSDKROOT)\inc -I$(KERBEROSCOMPATSDKROOT)\inc\krb5
HEIMDALLIBDIR=$(KERBEROSCOMPATSDKROOT)\lib\$(CPU)
BUILD_HEIMDAL=1
BUILD_KRBCOMPAT=1
!else
!	error Neither HEIMDALSDKROOT nor KERBEROSCOMPATSDKROOT are defined
!endif

incflags= -I$(INCDIR) -I$(OBJ) $(krbincflags)
rincflags= /i $(INCDIR)
khdefines=-DUNICODE -D_UNICODE
# khcwarn=/Wp64
!ifndef KH_NO_WX
khcwarn=$(khcwarn) /WX
!endif

khdefines=$(khdefines) -DISOLATION_AWARE_ENABLED

!if "$(CPU)" == "i386"
khdefines=$(khdefines) -D_USE_32BIT_TIME_T
!endif

# Debug symbols
ldebug=$(ldebug) /DEBUG
cdebug=$(cdebug) -Fd$(OBJ)\ -Zi

!ifdef NODEBUG
# Fix for buggy SDKs
cdebug=$(cdebug:-DDEBUG=)
cdebug=$(cdebug:-DNDEBUG=) -DNDEBUG
!endif

# Optimization
!ifndef NODEBUG
copt=
!else
copt=/Os /O2
!endif

# C++ Run-time type info
!ifndef NODEBUG
cppdebug=/GR
!else
cppdebug=
!endif

# GDI+
gdipflags=-DGDIPVER=0x0110

# Profiling
!ifdef KH_PROFILE
cprof=/GL
!if "$(KH_PROFILE)" == "PGI"
lprof=/LTCG:PGINSTRUMENT /PGD:$(@R).pgd
!elseif "$(KH_PROFILE)" == "PGO"
lprof=/LTCG:PGOPTIMIZE /PGD:$(@R).pgd
!else
! error Invalid KH_PROFILE value
!endif
!else
# ndef(KH_PROFILE)
cprof=
lprof=
!endif

# Additionally, suppress conflicting default library directives that we
# might pull in from external libraries.

!ifndef NODEBUG
lndeflibflag=/NODEFAULTLIB:MSVCRT
!else
lndeflibflag=/NODEFAULTLIB:MSVCRTD
!endif

khcflags=$(cdebug) $(cflags:-W4=-W3) $(incflags) $(khdefines) $(khcwarn) $(cprof) $(copt)
khlguiflags=$(ldebug) $(guilflags) $(lndeflibflag) $(lprof)
khlconflags=$(ldebug) $(conlflags) $(lndeflibflag) $(lprof)
khldllguiflags=$(ldebug) $(dlllflags) $(lndeflibflag) $(lprof)
khldllconflags=$(ldebug) $(dlllflags) $(lndeflibflag) $(lprof)

!if "$(KH_RUNTIME)" == "STATIC"
khcflags=$(khcflags) $(cvarsmt)
khlguiflags=$(khlguiflags) $(guilibsmt)
khlconflags=$(khlconflags) $(conlibsmt)
khldllguiflags=$(khldllguiflags) $(guilibsmt)
khldllconflags=$(khldllconflags) $(conlibsmt)
!else
khcflags=$(khcflags) $(cvarsdll)
khlguiflags=$(khlguiflags) $(guilibsdll)
khlconflags=$(khlconflags) $(conlibsdll)
khldllguiflags=$(khldllguiflags) $(guilibsdll)
khldllconflags=$(khldllconflags) $(conlibsdll)
!endif

C2OBJ=$(CC) $(khcflags) $(KH_AUXCFLAGS) /Fo"$@" /c $**

CPP2OBJ=$(CC) $(khcflags) $(gdipflags) $(KH_AUXCFLAGS) $(cppdebug) /EHsc /Fo"$@" /c $**

EXECONLINK=$(LINK) /NOLOGO $(khlconflags) /OUT:$@ $**

EXEGUILINK=$(LINK) /NOLOGO $(khlguiflags) /OUT:$@ $**

DLLCONLINK=$(LINK) /NOLOGO $(khldllconflags) /OUT:$@ /IMPLIB:$(LIBDIR)\$(@B).lib $**

DLLGUILINK=$(LINK) /NOLOGO $(khldllguiflags) /OUT:$@ /IMPLIB:$(LIBDIR)\$(@B).lib $**

DLLRESLINK=$(LINK) /NOLOGO /DLL /NOENTRY /MACHINE:$(PROCESSOR_ARCHITECTURE) /OUT:$@ $**

RC2RES=$(RC) $(rcflags) $(rcvars) -D_WIN32_WINNT=$(NMAKE_WINVER) $(RFLAGS) $(rincflags) /fo $@ $**

MC2RC=$(MC) $(MCFLAGS) -h $(OBJ)\ -m 1024 -r $(OBJ)\ -x $(OBJ)\ $**

{}.c{$(OBJ)}.obj:
	$(C2OBJ)

{}.cpp{$(OBJ)}.obj:
	$(CPP2OBJ)

{$(OBJ)}.c{$(OBJ)}.obj:
	$(C2OBJ)

{$(OBJ)}.cpp{$(OBJ)}.obj:
	$(CPP2OBJ)

{}.h{$(INCDIR)}.h:
	$(CP) $** $@

{}.rc{$(OBJ)}.res:
	$(RC2RES)

{$(OBJ)}.rc{$(OBJ)}.res:
	$(RC2RES)

# Bufferoverflowu crap
!if  (("$(CPU)" == "IA64" ) || ("$(CPU)" == "AMD64" ) || ("$(CPU)" == "ALPHA64" )) && "$(KH_CLVER)"!="vc8" && "$(KH_CLVER)"!="vc9"
SCLIB=bufferoverflowu.lib
!else
SCLIB=
!endif

clean::
	if exist "$(OBJ)" $(RM) "$(OBJ)"
	if exist vc70.pdb  $(RM) vc70.pdb
        if exist vc80.pdb  $(RM) vc80.pdb

test::

mkdirs::
!if !exist($(OBJ))
	$(MKDIR) $(OBJ)
!endif

TAGFILE = $(SRC)\TAGS

etag::
	etags -o $(TAGFILE) -a *.c *.h

.SUFFIXES: .h

#
# Manifest handling
#
# Starting with Visual Studio 8, the C compiler and the linker
# generate manifests so that the applications will link with the
# correct side-by-side DLLs at run-time.  These are required for
# correct operation under Windows XP.  We also have custom manifests
# which need to be merged with the manifests that VS creates.
#
# The syntax for invoking the _VC_MANIFEST_EMBED_foo macro is:
# $(_VC_MANIFEST_EMBED_???) <any additional manifests that need to be merged in>
#

!ifndef MT
MT=mt.exe -nologo
!endif

#
# Heimdal Platform Specific Manifest
#
!if (("$(CPU)" == "i386") || ("$(CPU)" == "x86"))
_MERGE_HEIMDAL_MANIFEST= \
if exist $@.manifest $(MT) -manifest $(HEIMDALINCDIR)\Heimdal.Application.x86.manifest $@.manifest -out:$@.manifest^
else $(CP) $(HEIMDALINCDIR)\Heimdal.Application.x86.manifest $@.manifest
!elseif (("$(CPU)" == "amd64") || ("$(CPU)" == "AMD64"))
_MERGE_HEIMDAL_MANIFEST= \
if exist $@.manifest $(MT) -manifest $(HEIMDALINCDIR)\Heimdal.Application.amd64.manifest $@.manifest -out:$@.manifest^
else $(CP) $(HEIMDALINCDIR)\Heimdal.Application.amd64.manifest $@.manifest
!else
!  error Unrecognized CPU value: $(CPU)
!endif

#
# Common Controls Platform Specific Manifest
#
!if (("$(CPU)" == "i386") || ("$(CPU)" == "x86"))
_MERGE_COMMON_CONTROLS_MANIFEST= \
if exist $@.manifest $(MT) -manifest $(SRC)\ui\netidmgr.i386.manifest $@.manifest -out:$@.manifest^
else $(CP) $(SRC)\ui\netidmgr.i386.manifest $@.manifest
!elseif (("$(CPU)" == "amd64") || ("$(CPU)" == "AMD64"))
_MERGE_COMMON_CONTROLS_MANIFEST= \
if exist $@.manifest $(MT) -manifest $(SRC)\ui\netidmgr.amd64.manifest $@.manifest -out:$@.manifest^
else $(CP) $(SRC)\ui\netidmgr.amd64.manifest $@.manifest
!else
!  error Unrecognized CPU value: $(CPU)
!endif

_VC_MANIFEST_EMBED_EXE_HOST= \
if exist $@.manifest $(MT) -outputresource:$@;2 -manifest $@.manifest

_VC_MANIFEST_EMBED_EXE= \
if exist $@.manifest $(MT) -outputresource:$@;1 -manifest $@.manifest

_VC_MANIFEST_EMBED_DLL= \
if exist $@.manifest $(MT) -outputresource:$@;2 -manifest $@.manifest

# Note that if you are merging manifests, then the VS generated
# manifest should be cleaned up after calling _VC_MANIFEST_EMBED_???.
# This ensures that even if the DLL or EXE is executed in-place, the
# embedded manifest will be used.  Otherwise the $@.manifest file will
# be used.
_VC_MANIFEST_CLEAN= \
if exist $@.manifest $(RM) $@.manifest

# End of manifest handling

#----------------------------------------------------------------------
# Code and assembly signing
#
# SIGNTOOL_D is the product description usually the name
#
# SIGNTOOL_C is any set of options required for certificate/private
# key selection for code signging.
#
# SIGNTOOL_O is any set of additional options to signtool.exe
#
# SIGNTOOL_T is the timestamp option

!ifdef CODESIGN
_CODESIGN=$(CODESIGN) $@
!else
! ifdef SIGNTOOL_C
!  ifndef SIGNTOOL
SIGNTOOL=signtool.exe
!  endif
!  ifndef SIGNTOOL_T
SIGNTOOL_T=http://timestamp.verisign.com/scripts/timstamp.dll
!  endif

_CODESIGN_SHA1 = \
   "$(SIGNTOOL)" sign /a /d $(SIGNTOOL_D) /du $(SIGNTOOL_O) /fd sha1 /t $(SIGNTOOL_T_SHA1) $(SIGNTOOL_C) $@
_CODESIGN_USERLAND_SHA256 = \
   "$(SIGNTOOL)" sign /a /d $(SIGNTOOL_D) /du $(SIGNTOOL_O) /as /fd sha256 /tr $(SIGNTOOL_T_SHA256) $(SIGNTOOL_C) $@

_CODESIGN= \
  $(_CODESIGN_SHA1) ^& \
  $(_CODESIGN_SHA256)
! else
_CODESIGN=echo Skipping code signing
! endif
!endif

!endif

!IF DEFINED(SYMSTORE_EXE) && DEFINED(SYMSTORE_ROOT)
!IF "$(SYMSTORE_COMMENT)" != ""
SYMSTORE_COMMENT = |$(SYMSTORE_COMMENT)
!ENDIF
SYMSTORE_IMPORT= \
$(SYMSTORE_EXE) add /s $(SYMSTORE_ROOT) /t "Network Identity Manager" /v "$(OUTPRE_DBG)-$(CPU)-$(NETIDMGR_VERSION)" /c "$(@F)$(SYMSTORE_COMMENT)" /f $*.*
!ELSE
SYMSTORE_IMPORT=
!ENDIF
